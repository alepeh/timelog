# Generated by Django 5.2.5 on 2025-08-12 04:32

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("accounts", "0004_add_vehicle_models"),
    ]

    operations = [
        migrations.CreateModel(
            name="FuelReceipt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "odometer_reading",
                    models.PositiveIntegerField(
                        help_text="Kilometerstand zum Zeitpunkt des Tankens",
                        verbose_name="Kilometerstand",
                    ),
                ),
                (
                    "receipt_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Zeitpunkt der Belegeinreichung",
                        verbose_name="Eingereicht am",
                    ),
                ),
                (
                    "receipt_image",
                    models.ImageField(
                        help_text="Foto oder Scan des Tankbelegs",
                        upload_to="fuel-receipts/%Y/%m/",
                        verbose_name="Beleg-Bild",
                    ),
                ),
                (
                    "fuel_amount_liters",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Getankte Kraftstoffmenge in Litern",
                        max_digits=6,
                        null=True,
                        verbose_name="Kraftstoffmenge (Liter)",
                    ),
                ),
                (
                    "total_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Gesamtkosten des Tankvorgangs",
                        max_digits=8,
                        null=True,
                        verbose_name="Gesamtkosten (€)",
                    ),
                ),
                (
                    "gas_station",
                    models.CharField(
                        blank=True,
                        help_text="Name/Marke der Tankstelle",
                        max_length=100,
                        verbose_name="Tankstelle",
                    ),
                ),
                (
                    "fuel_purchase_date",
                    models.DateField(
                        blank=True,
                        help_text="Datum des Tankvorgangs (falls abweichend vom Upload)",
                        null=True,
                        verbose_name="Tankdatum",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Zusätzliche Bemerkungen zum Tankbeleg",
                        verbose_name="Notizen",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Review"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                        ],
                        default="pending",
                        help_text="Bearbeitungsstatus des Belegs",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "rejection_reason",
                    models.TextField(
                        blank=True,
                        help_text="Grund für die Ablehnung des Belegs",
                        verbose_name="Ablehnungsgrund",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Erstellt am"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Aktualisiert am"),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Backoffice-Mitarbeiter der den Beleg genehmigt hat",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_receipts",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Genehmigt von",
                    ),
                ),
                (
                    "employee",
                    models.ForeignKey(
                        help_text="Mitarbeiter der den Beleg eingereicht hat",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="fuel_receipts",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Mitarbeiter",
                    ),
                ),
                (
                    "vehicle",
                    models.ForeignKey(
                        help_text="Fahrzeug für das der Tankbeleg eingereicht wird",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="accounts.vehicle",
                        verbose_name="Fahrzeug",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tankbeleg",
                "verbose_name_plural": "Tankbelege",
                "ordering": ["-receipt_date"],
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(("fuel_amount_liters__gte", 0)),
                        name="positive_fuel_amount",
                        violation_error_message="Kraftstoffmenge muss positiv sein.",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(("total_cost__gte", 0)),
                        name="positive_total_cost",
                        violation_error_message="Gesamtkosten müssen positiv sein.",
                    ),
                ],
            },
        ),
    ]

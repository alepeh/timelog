name: CI

on:
  push:
    branches: [ main ]
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  requirements:
    name: Requirements sanity check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            requirements*.txt

      - name: Install dev requirements
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; else pip install -r requirements.txt; fi

      - name: pip check
        run: pip check

      - name: pip-audit (advisory)
        run: pip-audit || true

  lint:
    name: Lint (black, isort, flake8)
    runs-on: ubuntu-latest
    needs: requirements
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            requirements*.txt

      - name: Install dev requirements
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; else pip install -r requirements.txt; fi

      - name: Black (check)
        run: black --check .

      - name: isort (check-only)
        run: isort --check-only .

      - name: flake8
        run: flake8 .

  typecheck:
    name: Type check (mypy)
    runs-on: ubuntu-latest
    needs: requirements
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            requirements*.txt

      - name: Install dev requirements
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; else pip install -r requirements.txt; fi

      - name: Run mypy
        run: mypy .

  tests:
    name: Tests (pytest) [py${{ matrix.python }}]
    runs-on: ubuntu-latest
    needs: requirements
    strategy:
      fail-fast: false
      matrix:
        python: ['3.12', '3.13']
    env:
      DJANGO_SETTINGS_MODULE: project.settings
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: 'pip'
          cache-dependency-path: |
            requirements*.txt

      - name: Install dev requirements
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; else pip install -r requirements.txt; fi

      - name: Run migrations (if manage.py present)
        if: ${{ hashFiles('**/manage.py') != '' }}
        run: |
          python manage.py migrate --noinput

      - name: Run tests with coverage
        run: |
          pytest --cov=. --cov-report=xml --cov-report=term-missing --cov-fail-under=90

      - name: Upload coverage.xml
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python }}
          path: coverage.xml

  migrations_check:
    name: Migrations check
    runs-on: ubuntu-latest
    needs: requirements
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            requirements*.txt

      - name: Install dev requirements
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; else pip install -r requirements.txt; fi

      - name: makemigrations --check --dry-run (if manage.py present)
        if: ${{ hashFiles('**/manage.py') != '' }}
        run: |
          python manage.py makemigrations --check --dry-run

      - name: Skip (no manage.py found)
        if: ${{ hashFiles('**/manage.py') == '' }}
        run: echo "No manage.py found; skipping migrations check"

  i18n_check:
    name: i18n messages check (optional)
    runs-on: ubuntu-latest
    needs: requirements
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            requirements*.txt

      - name: Install dev requirements
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; else pip install -r requirements.txt; fi

      - name: Check makemessages output for German locale
        shell: bash
        run: |
          if [ -d locale ]; then 
            django-admin makemessages -l de || exit 1
            git diff --exit-code -- locale || (echo "i18n messages out of date. Run 'django-admin makemessages -l de' and commit changes." && exit 1)
            git restore --source=HEAD --worktree --staged -- locale || true
          else
            echo "No locale/ directory; skipping i18n check"
          fi

  static_check:
    name: Static files collection (optional)
    runs-on: ubuntu-latest
    needs: requirements
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            requirements*.txt

      - name: Install dev requirements
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; else pip install -r requirements.txt; fi

      - name: Collect static (if manage.py present)
        if: ${{ hashFiles('**/manage.py') != '' }}
        run: |
          python manage.py collectstatic --noinput

      - name: Skip (no manage.py found)
        if: ${{ hashFiles('**/manage.py') == '' }}
        run: echo "No manage.py found; skipping collectstatic"

